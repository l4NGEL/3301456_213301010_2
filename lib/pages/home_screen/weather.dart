import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<Autogenerated> fetchHava() async {
  final response = await http.get(
    Uri.parse(
        'https://api.collectapi.com/weather/getWeather?data.lang=tr&data.city=KÃ¼tahya'),
    headers: {
      HttpHeaders.contentTypeHeader:"application/json",
      HttpHeaders.authorizationHeader: 'apikey 4EQTNMy1EKgqY5E9PCElM0:1y91PpOvBSKNexNtpvXRfA',
    },
  );

  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    return Autogenerated.fromJson(jsonDecode(response.body));
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Failed to load album');
  }
}
class Autogenerated {
  List<Result>? result;

  Autogenerated({this.result});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    if (json['result'] != null) {
      result = <Result>[];
      json['result'].forEach((v) {
        result!.add(new Result.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.result != null) {
      data['result'] = this.result!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Result {
  String? date;
  String? day;
  String? icon;
  String? description;
  String? status;
  String? degree;
  String? min;
  String? max;
  String? night;
  String? humidity;

  Result(
      {this.date,
        this.day,
        this.icon,
        this.description,
        this.status,
        this.degree,
        this.min,
        this.max,
        this.night,
        this.humidity});

  Result.fromJson(Map<String, dynamic> json) {
    date = json['date'];
    day = json['day'];
    icon = json['icon'];
    description = json['description'];
    status = json['status'];
    degree = json['degree'];
    min = json['min'];
    max = json['max'];
    night = json['night'];
    humidity = json['humidity'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['date'] = this.date;
    data['day'] = this.day;
    data['icon'] = this.icon;
    data['description'] = this.description;
    data['status'] = this.status;
    data['degree'] = this.degree;
    data['min'] = this.min;
    data['max'] = this.max;
    data['night'] = this.night;
    data['humidity'] = this.humidity;
    return data;
  }
}



class HavaDurumu extends StatefulWidget {
  const HavaDurumu({super.key});

  @override
  State<HavaDurumu> createState() => _HavaDurumuState();
}

class _HavaDurumuState extends State<HavaDurumu> {
  late Future<Autogenerated> futureHava;

  @override
  void initState() {
    super.initState();
    futureHava = fetchHava();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          backgroundColor: Color(0xFF800000),
          title: const Text('Hava Durumu'),
          leading: IconButton(
            icon: Icon(Icons.arrow_back),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ),
        body: Center(
          child: FutureBuilder<Autogenerated>(
            future: futureHava,
            builder: (context, snapshot) {
              if (snapshot.hasData) {
                print(snapshot.data!.result![0].date);
                return GridView.count(
                  crossAxisCount: 2, // Number of columns
                  padding: const EdgeInsets.all(8),
                  childAspectRatio: 0.6, // Adjust the aspect ratio for desired height
                  children: List.generate(snapshot.data!.result!.length, (index) {
                    return Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Card(
                        color: Colors.white, // Set the background color of the card
                        shape: RoundedRectangleBorder(
                          side: BorderSide(color: Colors.lightBlue, width: 1.0), // Set the border color and width of the card
                          borderRadius: BorderRadius.circular(8.0), // Set the border radius of the card
                        ),
                        child: Container(
                          padding: const EdgeInsets.all(8.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('${snapshot.data!.result![index].day}'),
                              Text('${snapshot.data!.result![index].description}'),
                              Text('Derece: ${snapshot.data!.result![index].degree}'),
                              Text('Gece: ${snapshot.data!.result![index].night}'),
                              Text('MAX: ${snapshot.data!.result![index].max}'),
                              Text('MIN: ${snapshot.data!.result![index].min}'),
                              Image.network(snapshot.data!.result![index].icon!),
                            ],
                          ),
                        ),
                      ),
                    );
                  }),
                );
              } else if (snapshot.hasError) {
                return Text('${snapshot.error}');
              }

              // By default, show a loading spinner.
              return const CircularProgressIndicator();
            },
          ),
        ),
      ),
    );
  }
}
